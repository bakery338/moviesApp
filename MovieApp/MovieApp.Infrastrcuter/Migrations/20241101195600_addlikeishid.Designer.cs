// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieSystem.Domain.Entites.ApplicationContext;

#nullable disable

namespace MovieApp.Infrastrcuter.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20241101195600_addlikeishid")]
    partial class addlikeishid
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MovieSystem.Domain.Entites.Commen.Catogery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Parentid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Parentid");

                    b.ToTable("Catogeries", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = " action ",
                            Parentid = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = " Deram ",
                            Parentid = 1
                        });
                });

            modelBuilder.Entity("MovieSystem.Domain.Entites.Commen.Like", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("IsLike")
                        .HasColumnType("bit");

                    b.Property<int>("Reviewid")
                        .HasColumnType("int");

                    b.Property<int>("Userid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Reviewid");

                    b.HasIndex("Userid");

                    b.ToTable("Likes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsLike = true,
                            Reviewid = 1,
                            Userid = 1
                        });
                });

            modelBuilder.Entity("MovieSystem.Domain.Entites.Commen.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Catogeryid")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Imag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsFree")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vedio")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Catogeryid");

                    b.ToTable("Movies", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Catogeryid = 1,
                            Name = " action1 "
                        },
                        new
                        {
                            Id = 2,
                            Catogeryid = 2,
                            Name = "deram 1"
                        });
                });

            modelBuilder.Entity("MovieSystem.Domain.Entites.Commen.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Create"
                        },
                        new
                        {
                            Id = 2,
                            Name = "update"
                        },
                        new
                        {
                            Id = 3,
                            Name = "delet"
                        });
                });

            modelBuilder.Entity("MovieSystem.Domain.Entites.Commen.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsHaid")
                        .HasColumnType("bit");

                    b.Property<int>("Movieid")
                        .HasColumnType("int");

                    b.Property<string>("Rate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Userid")
                        .HasColumnType("int");

                    b.Property<string>("date")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Movieid");

                    b.HasIndex("Userid");

                    b.ToTable("Reviews", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "review content",
                            IsHaid = false,
                            Movieid = 1,
                            Userid = 1
                        });
                });

            modelBuilder.Entity("MovieSystem.Domain.Entites.Commen.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "HR"
                        });
                });

            modelBuilder.Entity("MovieSystem.Domain.Entites.Commen.RolePermission", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("MovieSystem.Domain.Entites.Commen.RoleUser", b =>
                {
                    b.Property<int>("Userid")
                        .HasColumnType("int");

                    b.Property<int>("Roleid")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Userid", "Roleid");

                    b.HasIndex("Roleid");

                    b.ToTable("RoleUsers");
                });

            modelBuilder.Entity("MovieSystem.Domain.Entites.Commen.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<short?>("Age")
                        .HasColumnType("smallint");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "bakery"
                        },
                        new
                        {
                            Id = 2,
                            Name = "ali"
                        });
                });

            modelBuilder.Entity("MovieSystem.Domain.Entites.Commen.Catogery", b =>
                {
                    b.HasOne("MovieSystem.Domain.Entites.Commen.Catogery", "parentcatogeries")
                        .WithMany("subcatogeries")
                        .HasForeignKey("Parentid")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("parentcatogeries");
                });

            modelBuilder.Entity("MovieSystem.Domain.Entites.Commen.Like", b =>
                {
                    b.HasOne("MovieSystem.Domain.Entites.Commen.Review", "Review")
                        .WithMany("Likes")
                        .HasForeignKey("Reviewid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieSystem.Domain.Entites.Commen.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Review");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MovieSystem.Domain.Entites.Commen.Movie", b =>
                {
                    b.HasOne("MovieSystem.Domain.Entites.Commen.Catogery", "Catogery")
                        .WithMany("Movies")
                        .HasForeignKey("Catogeryid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Catogery");
                });

            modelBuilder.Entity("MovieSystem.Domain.Entites.Commen.Review", b =>
                {
                    b.HasOne("MovieSystem.Domain.Entites.Commen.Movie", "Movie")
                        .WithMany("reviews")
                        .HasForeignKey("Movieid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MovieSystem.Domain.Entites.Commen.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MovieSystem.Domain.Entites.Commen.RolePermission", b =>
                {
                    b.HasOne("MovieSystem.Domain.Entites.Commen.Permission", "permission")
                        .WithMany("rolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MovieSystem.Domain.Entites.Commen.Role", "Role")
                        .WithMany("rolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("permission");
                });

            modelBuilder.Entity("MovieSystem.Domain.Entites.Commen.RoleUser", b =>
                {
                    b.HasOne("MovieSystem.Domain.Entites.Commen.Role", "Role")
                        .WithMany("roleUsers")
                        .HasForeignKey("Roleid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MovieSystem.Domain.Entites.Commen.User", "User")
                        .WithMany("RoleUsers")
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MovieSystem.Domain.Entites.Commen.Catogery", b =>
                {
                    b.Navigation("Movies");

                    b.Navigation("subcatogeries");
                });

            modelBuilder.Entity("MovieSystem.Domain.Entites.Commen.Movie", b =>
                {
                    b.Navigation("reviews");
                });

            modelBuilder.Entity("MovieSystem.Domain.Entites.Commen.Permission", b =>
                {
                    b.Navigation("rolePermissions");
                });

            modelBuilder.Entity("MovieSystem.Domain.Entites.Commen.Review", b =>
                {
                    b.Navigation("Likes");
                });

            modelBuilder.Entity("MovieSystem.Domain.Entites.Commen.Role", b =>
                {
                    b.Navigation("rolePermissions");

                    b.Navigation("roleUsers");
                });

            modelBuilder.Entity("MovieSystem.Domain.Entites.Commen.User", b =>
                {
                    b.Navigation("Likes");

                    b.Navigation("Reviews");

                    b.Navigation("RoleUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
